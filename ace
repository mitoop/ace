#!/usr/bin/env bash

SOURCE="${BASH_SOURCE[0]}"

if [[ -L "$SOURCE" ]]
then
    DIR=$(php -r "echo dirname(realpath('$SOURCE'));")
else
    DIR="$( cd "$( dirname "$SOURCE" )" && pwd )"
fi

if [ ! -f "$DIR/cli/ace" ]
then
    DIR=$(php -r "echo realpath('$DIR/../mitoop/ace');")
fi

# Clear
# Upon first execution, Ace caches all PHP versions to improve subsequent execution speed.
# When you install or remove PHP versions, you need clear the cache for getting fresh PHP versions.
# To clear the cache, you can use the ace clear command.
# And then the cache will be automatically rebuilt during the next run.
if [[ "$1" = "clear" ]]
then
    cache="$DIR/phps.cache"
    [ -e "$cache" ] && rm "$cache"
    exit

# Hello
elif [[ "$1" = "hello" ]]
then
    echo "Hello, It's Ace!"
    exit
fi

# Get the PHP executable to use
if [[ "$PHP_EXECUTABLE" = "" ]]
then
    PHP="$(php $DIR/cli/find-usable-php.php)"

    # Validate output before running it on the CLI
    if [[ ! -f "$PHP" ]]; then
        echo "Error finding executable PHP, $PHP doesn't exists."
        cache="$DIR/phps.cache"
        [ -e "$cache" ] && rm "$cache"
        echo "It might be caused by caching. We have already cleared the cache. You can try again."
        echo "Quitting for safety."
        exit
    fi

    export PHP_EXECUTABLE="$PHP"
else
    PHP="$PHP_EXECUTABLE"
fi

# Proxy PHP commands to the "php" executable on the isolated site
if [[ "$1" = "php" ]]
then
    $PHP "${@:2}"
    exit

# Proxy Composer commands with the "php" executable on the isolated site
elif [[ "$1" = "composer" ]]
then
    $PHP $(which composer) "${@:2}"
    exit

# Proxy pecl commands with the "php" executable on the isolated site
elif [[ "$1" = "pecl" ]]
then
    PECL="${PHP%php}pecl"
    $PECL "${@:2}"
    exit

# Default to running the command with the "php" executable on the isolated site
else
   $PHP "${@:1}"
   exit
fi
